fn main() {
    // rust에서 사용되는 모든 값은 타입을 갖는다.
    // 어떤 형태의 데이터인지 명시하여 rust에게 알려줘야한다.
    // ! rust는 타입이 고정된 언어이다. 즉, 컴파일 타임때 타입이 반드시 정해져있어야 한다.

    // 타입은 크게 스칼라, 컴파운드 둘로 나눌 수 있다.
    
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // ===== 스칼라 타입들 =====

    /*
    ◎ 정수형
    8-bit    : i8(signed)    u8(unsigned)
    16-bit   : i16(signed)   u16(unsigned)
    32-bit   : i32(signed)   u32(unsigned)
    64-bit   : i64(signed)   u64(unsigned)
    */

    let x: i8 = 1;
    let y: i16 = 2;
    let z = 3; // i32 (기본타입)
    let w: i64 = 4; 


    /*   
    ◎ 부동소수점형 
    IEEE754 표준을 따름
    32-bit   : f32
    64-bit   : f64 (기본타입, 최신의 CPU상에서는 f32와 비슷한 속도를 내지만, 더 정밀하기 때문)  
    */

    let x = 2.0; // f64
    let y: f32 = 3.0;

    /*   
    ◎ Boolean
    */

    let x = true;
    let y: bool = false;

    /*
    ◎ 문자형
    다른 언어들과 같이 char로 표현. 무조건 작은따옴표로 정의해야함
    ! 하지만, rust의 char는 UnicodeChar이다. 그렇기에 많은 문자를 표현할수 있지만, unicode의 특정범위만 포괄하므로 전부 표현은 못한다.
    ! (한국어 / 중국어 / 일본어 / 이모티콘 등은 대부분 표현할수 있는 것 같음.)
    */

    let x = 'z';
    let y: char = 'Z';
    let z = '😻';
    let w: String = "sdsds".to_string();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // ===== 컴파운드 타입들 =====

    /*
    ◎ 튜플형
    괄호() 로 정의한다. 배열과 달리 요소끼리 다른 타입을 보관할 수 있음.
    무슨 타입들을 넣을것인지 명시적으로 정의해주는 것이 좋음.

    튜플타입에서 값을 빼올수 있는 방법은 두가지인데
    첫번째는 let으로 튜플요소의 개수만큼 정의후 대입을 해주는 것이다.
    두번째는 튜플타입에 간접연산자(.)을 통해 0부터 인덱스로 접근이 가능하다.
    */
    let tup: (i32, f64, u8) = (500, 6.4, 1);

    // 첫번째 방법
    let (x, y, z) = tup;
    println!("The second value of tup is {}", y);

    // 두번째 방법
    println!("The third value of tup is {}", tup.2);

    /*
    ◎ 배열형
    대괄호[]로 정의한다. 요소들의 타입이 모두 같아야만 보관할수있다.
    요소에 접근하는 법은 다른 언어들과 똑같이 대괄호를 통해 인덱스로 접근한다.
    ! Rust의 배열은 길이가 한번 고정되면 일반적인 방법으로는 크기를 줄이거나 늘릴 수 없다. 
    ! 즉, 배열의 크기는 컴파일타임때 정의해준 크기로 고정이 된다.
    */

    let arr = [1, 2, 3, 4, 5];

    let elem1 = arr[0];
    let elem2 = arr[1];

    println!("The first elem is {}", elem1);
    println!("The second elem is {}", elem2);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
